#!/bin/bash

 BASE03=$(tput setaf 234)
 BASE02=$(tput setaf 235)
 BASE01=$(tput setaf 240)
 BASE00=$(tput setaf 241)
  BASE0=$(tput setaf 244)
  BASE1=$(tput setaf 245)
  BASE2=$(tput setaf 254)
  BASE3=$(tput setaf 230)
 YELLOW=$(tput setaf 136)
 ORANGE=$(tput setaf 166)
    RED=$(tput setaf 160)
MAGENTA=$(tput setaf 125)
 VIOLET=$(tput setaf 61)
   BLUE=$(tput setaf 33)
   CYAN=$(tput setaf 37)
  GREEN=$(tput setaf 64)

   BOLD=$(tput bold)
  RESET=$(tput sgr0)

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working tree clean" ]]; then
    state="\[${GREEN}\]"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="\[${YELLOW}\]"
  else
    state="\[${RED}\]"
  fi

  # Set arrow icon based on status against remote.
  remote_pattern="Your branch is (ahead|behind)+ "
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote=" ⇡"
    else
      remote=" ⇣"
    fi
  else
    remote=""
  fi
  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote=" ↯"
  fi

  # Get the name of the branch.
  branch_pattern="^(# )?On branch ([^${IFS}]*)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[2]}
  fi

  # Set the final branch string.
  BRANCH=" (${state}${branch}${remote}\[${RESET}\])"
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL="\[${CYAN}\]➽  "
  else
      PROMPT_SYMBOL="\[${RED}\]➽  "
  fi
}

# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    BRANCH=''
  fi

  # Set the bash prompt variable.
  PS1="\n${PROMPT_SYMBOL}\[${BOLD}\]\[${BASE0}\]\w:\[${RESET}\]${BRANCH}\n"
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
